{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport function getRandomDegree() {\n  var myHeaders, res;\n  return _regeneratorRuntime.async(function getRandomDegree$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          myHeaders = new Headers();\n          myHeaders.append('Content-Type', 'application/json');\n          myHeaders.append('cache-control', 'no-cache');\n          myHeaders.append('Accept', 'application/json');\n          _context.prev = 4;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fetch(\"https://zodiac-symbols.herokuapp.com\" + \"/degree\", {\n            method: 'GET',\n            headers: myHeaders\n          }));\n\n        case 7:\n          res = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](4);\n\n          if (_context.t0.response) {\n            console.log(\"response.data\", _context.t0.response.data);\n            console.log(\"response.status\", _context.t0.response.status);\n            console.log(\"response.headers\", _context.t0.response.headers);\n          } else if (_context.t0.request) {\n            console.log(\"e.request\", _context.t0.request);\n          } else {\n            console.log('There has been a problem with getting RANDOM operation: ' + _context.t0.message);\n          }\n\n          throw _context.t0;\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[4, 13]], Promise);\n}\nexport function getDegreeSearch(sign, degree) {\n  var res;\n  return _regeneratorRuntime.async(function getDegreeSearch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"https://zodiac-symbols.herokuapp.com\" + \"/DBdegree\", {\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json',\n              'cache-control': 'no-cache'\n            },\n            body: JSON.stringify({\n              sign: sign,\n              degree: degree\n            })\n          }));\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('There has been a problem with your DBSearch operation: ' + _context2.t0.message);\n          throw _context2.t0;\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n}","map":{"version":3,"sources":["/Users/paola/Desktop/zodiac-symbols/utils/API.js"],"names":["getRandomDegree","myHeaders","Headers","append","fetch","method","headers","res","json","response","console","log","data","status","request","message","getDegreeSearch","sign","degree","body","JSON","stringify"],"mappings":";AAEA,OAAO,SAAeA,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,UAAAA,SADH,GACe,IAAIC,OAAJ,EADf;AAEHD,UAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AACAF,UAAAA,SAAS,CAACE,MAAV,CAAiB,eAAjB,EAAkC,UAAlC;AACAF,UAAAA,SAAS,CAACE,MAAV,CAAiB,QAAjB,EAA2B,kBAA3B;AAJG;AAAA;AAAA,2CAMaC,KAAK,qDAAsB;AAC5CC,YAAAA,MAAM,EAAE,KADoC;AAE5CC,YAAAA,OAAO,EAAEL;AAFmC,WAAtB,CANlB;;AAAA;AAMCM,UAAAA,GAND;AAAA;AAAA,2CAUQA,GAAG,CAACC,IAAJ,EAVR;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAYL,cAAI,YAAMC,QAAV,EAAoB;AAGnBC,YAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,YAAMF,QAAN,CAAeG,IAA5C;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,YAAMF,QAAN,CAAeI,MAA9C;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,YAAMF,QAAN,CAAeH,OAA/C;AACA,WAND,MAMO,IAAI,YAAMQ,OAAV,EAAmB;AAIzBJ,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB,YAAMG,OAA/B;AACA,WALM,MAKA;AAENJ,YAAAA,OAAO,CAACC,GAAR,CAAY,6DAA6D,YAAMI,OAA/E;AACA;;AA1BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BP,OAAO,SAAeC,eAAf,CAA+BC,IAA/B,EAAqCC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEad,KAAK,uDAAwB;AAC9CC,YAAAA,MAAM,EAAE,MADsC;AAE9CC,YAAAA,OAAO,EAAE;AACR,wBAAU,kBADF;AAER,8BAAgB,kBAFR;AAGR,+BAAiB;AAHT,aAFqC;AAO9Ca,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBJ,cAAAA,IAAI,EAAJA,IADoB;AAEpBC,cAAAA,MAAM,EAANA;AAFoB,aAAf;AAPwC,WAAxB,CAFlB;;AAAA;AAECX,UAAAA,GAFD;AAAA;AAAA,2CAcQA,GAAG,CAACC,IAAJ,EAdR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBLE,UAAAA,OAAO,CAACC,GAAR,CAAY,4DAA4D,aAAII,OAA5E;AAhBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { API_URL } from '@env';\n\nexport async function getRandomDegree() {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/json');\n    myHeaders.append('cache-control', 'no-cache');\n    myHeaders.append('Accept', 'application/json');\n    try {\n\t\tconst res = await fetch(`${API_URL}/degree`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: myHeaders,\n        });\n\t\treturn await res.json();\n\t} catch (error) {\n\t\tif (error.response) {\n\t\t\t// The request was made and the server responded with a status code\n\t\t\t// that falls out of the range of 2xx\n\t\t\tconsole.log(\"response.data\", error.response.data);\n\t\t\tconsole.log(\"response.status\", error.response.status);\n\t\t\tconsole.log(\"response.headers\", error.response.headers);\n\t\t} else if (error.request) {\n\t\t\t// The request was made but no response was received\n\t\t\t// `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n\t\t\t// http.ClientRequest in node.js\n\t\t\tconsole.log(\"e.request\", error.request);\n\t\t} else {\n\t\t\t// Something happened in setting up the request that triggered an Error\n\t\t\tconsole.log('There has been a problem with getting RANDOM operation: ' + error.message);\n\t\t}\n\t\tthrow error;\n\t}\n}\n\nexport async function getDegreeSearch(sign, degree) {\n\ttry {\n\t\tconst res = await fetch(`${API_URL}/DBdegree`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'cache-control': 'no-cache'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsign,\n\t\t\t\tdegree\n\t\t\t})\n\t\t});\n\t\treturn await res.json();\n\t} catch (err) {\n\t\tconsole.log('There has been a problem with your DBSearch operation: ' + err.message);\n\t\tthrow err;\n\t}\n}"]},"metadata":{},"sourceType":"module"}