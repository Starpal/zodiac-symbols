{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Home from \"./views/Home/index\";\nimport Random from \"./views/Search/index\";\nimport DBSearch from \"./views/DBSearch/index\";\nimport Results from \"./views/Results/index\";\nimport AppLoading from \"expo-app-loading\";\nimport useFonts from \"./hooks/useFonts\";\nvar Stack = createStackNavigator();\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      IsReady = _useState2[0],\n      SetIsReady = _useState2[1];\n\n  var LoadFonts = function LoadFonts() {\n    return _regeneratorRuntime.async(function LoadFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(useFonts());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (!IsReady) {\n    return React.createElement(AppLoading, {\n      startAsync: LoadFonts,\n      onFinish: function onFinish() {\n        return SetIsReady(true);\n      },\n      onError: function onError() {}\n    });\n  }\n\n  return React.createElement(NavigationContainer, null, React.createElement(Stack.Navigator, {\n    screenOptions: {\n      title: '',\n      headerBackTitleVisible: ''\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: Home,\n    options: {\n      headerTransparent: true\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Random\",\n    component: Random,\n    options: {\n      headerTransparent: true,\n      headerTintColor: 'rgba(0, 0, 0, 0.8)'\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"DBSearch\",\n    component: DBSearch,\n    navigation: navigation,\n    options: {\n      headerTransparent: true,\n      headerTintColor: '#EF6145'\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Results\",\n    component: Results,\n    navigation: navigation,\n    options: {\n      headerTransparent: true,\n      headerTintColor: 'rgba(0, 0, 0, 0.8)'\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/paola/Desktop/zodiac-symbols/App.js"],"names":["React","useState","NavigationContainer","createStackNavigator","Home","Random","DBSearch","Results","AppLoading","useFonts","Stack","App","navigation","IsReady","SetIsReady","LoadFonts","title","headerBackTitleVisible","headerTransparent","headerTintColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,QAAP;AACA,OAAOC,OAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,QAAP;AAEA,IAAMC,KAAK,GAAGP,oBAAoB,EAAlC;AAEA,eAAe,SAASQ,GAAT,OAA6B;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAE3C,kBAA8BX,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOY,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACRN,QAAQ,EADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAIE,MAAI,CAACI,OAAL,EAAc;AACZ,WACE,oBAAC,UAAD;AACG,MAAA,UAAU,EAAEE,SADf;AAEG,MAAA,QAAQ,EAAE;AAAA,eAAMD,UAAU,CAAC,IAAD,CAAhB;AAAA,OAFb;AAGG,MAAA,OAAO,EAAE,mBAAM,CAAE;AAHpB,MADF;AAOD;;AAEH,SACC,oBAAC,mBAAD,QACC,oBAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,aAAa,EAAE;AAAEE,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,sBAAsB,EAAE;AAArC;AAAhC,KACC,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEb,IAArC;AACC,IAAA,OAAO,EAAE;AAAEc,MAAAA,iBAAiB,EAAE;AAArB;AADV,IADD,EAGC,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,QAAnB;AAA4B,IAAA,SAAS,EAAEb,MAAvC;AACC,IAAA,OAAO,EAAE;AAAEa,MAAAA,iBAAiB,EAAE,IAArB;AAA2BC,MAAAA,eAAe,EAAE;AAA5C;AADV,IAHD,EAKC,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,UAAnB;AAA8B,IAAA,SAAS,EAAEb,QAAzC;AAAmD,IAAA,UAAU,EAAEM,UAA/D;AACC,IAAA,OAAO,EAAE;AAACM,MAAAA,iBAAiB,EAAE,IAApB;AAA0BC,MAAAA,eAAe,EAAE;AAA3C;AADV,IALD,EAOC,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAEZ,OAAxC;AAAiD,IAAA,UAAU,EAAEK,UAA7D;AACC,IAAA,OAAO,EAAE;AAAEM,MAAAA,iBAAiB,EAAE,IAArB;AAA2BC,MAAAA,eAAe,EAAE;AAA5C;AADV,IAPD,CADD,CADD;AAcA","sourcesContent":["import React, { useState } from 'react'\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Home from './views/Home/index';\nimport Random from './views/Search/index';\nimport DBSearch from './views/DBSearch/index';\nimport Results from './views/Results/index';\nimport AppLoading from \"expo-app-loading\";\nimport useFonts from './hooks/useFonts';\n\nconst Stack = createStackNavigator();\n\nexport default function App({ navigation }) {\n\n\tconst [IsReady, SetIsReady] = useState(false)\n\n\tconst LoadFonts = async () => {\n    \tawait useFonts();\n  \t};\n\n  \tif (!IsReady) {\n    \treturn (\n     \t\t<AppLoading\n        \t\tstartAsync={LoadFonts}\n        \t\tonFinish={() => SetIsReady(true)}\n        \t\tonError={() => {}}\n      \t\t/>\n    \t);\n  \t}\n\t\n\treturn (\n\t\t<NavigationContainer>\n\t\t\t<Stack.Navigator screenOptions={{ title: '', headerBackTitleVisible: ''}}>\n\t\t\t\t<Stack.Screen name=\"Home\" component={Home}\n\t\t\t\t\toptions={{ headerTransparent: true }} />\n\t\t\t\t<Stack.Screen name=\"Random\" component={Random}\n\t\t\t\t\toptions={{ headerTransparent: true, headerTintColor: 'rgba(0, 0, 0, 0.8)' }}/>\n\t\t\t\t<Stack.Screen name=\"DBSearch\" component={DBSearch} navigation={navigation}\n\t\t\t\t\toptions={{headerTransparent: true, headerTintColor: '#EF6145'}}/>\n\t\t\t\t<Stack.Screen name=\"Results\" component={Results} navigation={navigation}\n\t\t\t\t\toptions={{ headerTransparent: true, headerTintColor: 'rgba(0, 0, 0, 0.8)' }}/>\n\t\t\t</Stack.Navigator>\n\t\t</NavigationContainer>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}